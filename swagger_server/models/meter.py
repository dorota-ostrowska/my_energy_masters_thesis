# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Meter(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id_meter: int=None, ranking_points: int=None):  # noqa: E501
        """Meter - a model defined in Swagger

        :param id_meter: The id_meter of this Meter.  # noqa: E501
        :type id_meter: int
        :param ranking_points: The ranking_points of this Meter.  # noqa: E501
        :type ranking_points: int
        """
        self.swagger_types = {
            'id_meter': int,
            'ranking_points': int
        }

        self.attribute_map = {
            'id_meter': 'id_meter',
            'ranking_points': 'ranking_points'
        }
        self._id_meter = id_meter
        self._ranking_points = ranking_points

    @classmethod
    def from_dict(cls, dikt) -> 'Meter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Meter of this Meter.  # noqa: E501
        :rtype: Meter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id_meter(self) -> int:
        """Gets the id_meter of this Meter.

        A unique ID of a meter.  # noqa: E501

        :return: The id_meter of this Meter.
        :rtype: int
        """
        return self._id_meter

    @id_meter.setter
    def id_meter(self, id_meter: int):
        """Sets the id_meter of this Meter.

        A unique ID of a meter.  # noqa: E501

        :param id_meter: The id_meter of this Meter.
        :type id_meter: int
        """

        self._id_meter = id_meter

    @property
    def ranking_points(self) -> int:
        """Gets the ranking_points of this Meter.

        Points for pro-ecological behavior.  # noqa: E501

        :return: The ranking_points of this Meter.
        :rtype: int
        """
        return self._ranking_points

    @ranking_points.setter
    def ranking_points(self, ranking_points: int):
        """Sets the ranking_points of this Meter.

        Points for pro-ecological behavior.  # noqa: E501

        :param ranking_points: The ranking_points of this Meter.
        :type ranking_points: int
        """

        self._ranking_points = ranking_points
