openapi: 3.0.3
info:
  title: Swagger MyEnergy - OpenAPI 3.0
  description: |-
    Api for hosting backend system for the MyEnergy website.

    GET (list) - if without param, returns full list of all items without accompanying objects. Is filtered, sorted and paginated by default.

    GET (item) - if with /{id} param, returns full,  DTO of an object WITH any required accompanying object (required to limit number of requests).

    POST - used to add record, without param. Usually a clean DTO of an object, but may consist of accompanying objects.

    PUT - used to edit record with /{id} param, same content as by POST.

    DELETE - used to delete object, ie. set deleted_at to the given object and all subordinate objects if cascade deletion is required.
  version: 1.0.1
servers:
- url: https://myenergy.swagger.io/api/v3
tags:
- name: user
  description: Operations about client.
- name: offer
  description: Everything about offers.
- name: readings
  description: Access to client's meter readings.
- name: ranking
  description: Everything about ranking.
paths:
  /user:
    post:
      tags:
      - user
      summary: Creates a user.
      description: This can only be done by the logged out user.
      operationId: create_new_user
      requestBody:
        description: Created user object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
          application/xml:
            schema:
              $ref: '#/components/schemas/Client'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Client'
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
            application/xml:
              schema:
                $ref: '#/components/schemas/Client'
        "400":
          description: Invalid input.
        "422":
          description: Validation exception.
      x-openapi-router-controller: swagger_server.controllers.user_controller
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system.
      description: ""
      operationId: login_user
      parameters:
      - name: username
        in: query
        description: The user name for login.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful operation.
          headers:
            X-Rate-Limit:
              description: Calls per hour allowed by the user.
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: Date in UTC when token expires.
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
                x-content-type: application/xml
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username or password supplied.
      x-openapi-router-controller: swagger_server.controllers.user_controller
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session.
      description: ""
      operationId: logout_user
      parameters: []
      responses:
        default:
          description: Successful operation.
      x-openapi-router-controller: swagger_server.controllers.user_controller
  /user/{id_client}:
    get:
      tags:
      - user
      summary: Gets client by client ID.
      description: ""
      operationId: get_user_by_client_id
      parameters:
      - name: id_client
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
            application/xml:
              schema:
                $ref: '#/components/schemas/Client'
        "400":
          description: Invalid username supplied.
        "404":
          description: User not found.
      x-openapi-router-controller: swagger_server.controllers.user_controller
    put:
      tags:
      - user
      summary: Updates client.
      description: This can only be done by the logged in user.
      operationId: update_user
      parameters:
      - name: id_client
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Update an existent user in the store.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
          application/xml:
            schema:
              $ref: '#/components/schemas/Client'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Client'
      responses:
        default:
          description: Successful operation.
      x-openapi-router-controller: swagger_server.controllers.user_controller
    delete:
      tags:
      - user
      summary: Deletes client.
      description: This can only be done by the logged in user.
      operationId: delete_user
      parameters:
      - name: id_client
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: Invalid username supplied.
        "404":
          description: User not found.
      x-openapi-router-controller: swagger_server.controllers.user_controller
  /offer/{id_offersformeter}:
    get:
      tags:
      - offer
      summary: Finds offer by IDs.
      description: Returns a single offer (my offer).
      operationId: get_offer_by_offers_for_meter_id
      parameters:
      - name: id_offersformeter
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OffersForMeter'
            application/xml:
              schema:
                $ref: '#/components/schemas/OffersForMeter'
        "400":
          description: Invalid ID supplied.
        "404":
          description: Offer not found.
      x-openapi-router-controller: swagger_server.controllers.offer_controller
    post:
      tags:
      - offer
      summary: Updates an existing offer adding a new row to a history table.
      description: Update an existing offer by offersformeter ID. Update an existent
        offer in the account. Add a new row in the OffersForMeter table.
      operationId: update_offer
      parameters:
      - name: id_offersformeter
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OffersForMeter'
            application/xml:
              schema:
                $ref: '#/components/schemas/OffersForMeter'
        "400":
          description: Invalid ID supplied.
        "404":
          description: Offer not found.
        "422":
          description: Validation exception.
      x-openapi-router-controller: swagger_server.controllers.offer_controller
  /offer/all:
    get:
      tags:
      - offer
      summary: Returns all available offers.
      description: Returns offers.
      operationId: get_all_offers
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferArray'
            application/xml:
              schema:
                $ref: '#/components/schemas/OfferArray'
        "404":
          description: Offers not found.
      x-openapi-router-controller: swagger_server.controllers.offer_controller
  /readings/{id_meter}:
    get:
      tags:
      - readings
      summary: Returns data to create consumption charts.
      description: Returns readings by meter ID.
      operationId: get_readings_by_meter_id
      parameters:
      - name: id_meter
        in: path
        description: Readings (all table) filtered by meter ID to return.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadingArray'
            application/xml:
              schema:
                $ref: '#/components/schemas/ReadingArray'
        "400":
          description: Invalid meter ID supplied.
        "404":
          description: Readings for this meter not found.
      x-openapi-router-controller: swagger_server.controllers.readings_controller
  /readings/neighborhood/{id_meter}:
    get:
      tags:
      - readings
      summary: Returns data of consumption in the client's area to compare consumptions.
      description: Returns readings from neighborhood by meter ID (zip code).
      operationId: get_readings_from_neighborhood_by_meter_id
      parameters:
      - name: id_meter
        in: path
        description: Readings (all table) filtered by meter ID to return.
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadingArray'
            application/xml:
              schema:
                $ref: '#/components/schemas/ReadingArray'
        "400":
          description: Invalid meter ID supplied.
        "404":
          description: Readings for this meter not found.
      x-openapi-router-controller: swagger_server.controllers.readings_controller
  /ranking/{id_meter}:
    get:
      tags:
      - ranking
      summary: Gets points of a user.
      description: Gets points for a meter (user connected with a meter).
      operationId: get_points_by_meter_id
      parameters:
      - name: id_meter
        in: path
        description: 'The name that needs to be fetched. Use meter1 for testing. '
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meter'
            application/xml:
              schema:
                $ref: '#/components/schemas/Meter'
        "400":
          description: Invalid username supplied.
        "404":
          description: User not found.
      x-openapi-router-controller: swagger_server.controllers.ranking_controller
    put:
      tags:
      - ranking
      summary: Adds points to a user account.
      description: Adds points to a user (user connected with a meter).
      operationId: add_points_by_meter_id
      parameters:
      - name: id_meter
        in: path
        description: 'The name that needs to be fetched. Use meter1 for testing. '
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Update an existent user in the store.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Meter'
          application/xml:
            schema:
              $ref: '#/components/schemas/Meter'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Meter'
      responses:
        default:
          description: Successful operation.
      x-openapi-router-controller: swagger_server.controllers.ranking_controller
components:
  schemas:
    Meter:
      type: object
      properties:
        id_meter:
          type: integer
          description: A unique ID of a meter.
          example: 10
        ranking_points:
          type: integer
          description: Points for pro-ecological behavior.
          example: 10
      example:
        id_meter: 10
        ranking_points: 10
      xml:
        name: meter
    Address:
      type: object
      properties:
        id_address:
          type: integer
          description: A unique ID of an address. Many clients can live at the address.
          example: 5
        street:
          type: string
          description: A street's name.
          example: 5th Avenue
        house_number:
          type: integer
          description: A house's number.
          example: 9
        zip_code:
          type: string
          description: A postal code.
          example: 01-911
        city:
          type: string
          description: A city's name.
          example: New York
        additional_info:
          type: string
          description: "Floor, flat's number, etc."
          example: floor 11
      xml:
        name: address
    Reading:
      type: object
      properties:
        id_reading:
          type: integer
          description: A unique ID of a single reading.
          example: 10
        time:
          type: string
          description: An accurate date and time of a reading.
          format: date-time
        used_energy:
          type: number
          description: The amount of energy that has been used up to the hour specified
            in the "time" column (kWh).
          example: 543.5
      example:
        id_reading: 10
        used_energy: 543.5
        time: 2000-01-23T04:56:07.000+00:00
      xml:
        name: reading
    ReadingArray:
      type: array
      items:
        $ref: '#/components/schemas/Reading'
    Client:
      type: object
      properties:
        id_client:
          type: integer
          description: A unique ID of a client.
          example: 10
        name:
          type: string
          description: A name of a client.
          example: John
        surname:
          type: string
          description: A surname of a client.
          example: Doe
        pesel:
          type: string
          description: "A unique ID number for a Pole, sth like password number."
          format: "98050436876"
        email:
          type: string
          description: An email of a client.
          example: john.doe@example.com
        password:
          type: string
          description: A password to the MyEnergy account for a client.
          example: P@ssword123!
      example:
        password: P@ssword123!
        id_client: 10
        surname: Doe
        name: John
        pesel: pesel
        email: john.doe@example.com
      xml:
        name: client
    Offer:
      type: object
      properties:
        id_offer:
          type: integer
          description: A unique ID of an offer.
          example: 7
        tarrif:
          type: string
          description: A price plan according to which electricity sellers offer electricity
            to their customers.
          example: G11
        pv_installation:
          type: boolean
          description: "Information whether an energy source, such as a photovoltaic\
            \ installation, is connected to the meter. 0 - no, 1 - yes."
          example: false
      example:
        tarrif: G11
        pv_installation: false
        id_offer: 7
      xml:
        name: offer
    OfferArray:
      type: array
      items:
        $ref: '#/components/schemas/Offer'
    OffersForMeter:
      type: object
      properties:
        id_offersformeter:
          type: integer
          description: A unique ID of an offer for meter.
          example: 4
        start_date:
          type: string
          description: Date from which the offer is active.
          format: date-time
        end_date:
          type: string
          description: Date from which the offer is inactive.
          format: date-time
      description: A history of offers.
      example:
        end_date: 2000-01-23T04:56:07.000+00:00
        id_offersformeter: 4
        start_date: 2000-01-23T04:56:07.000+00:00
      xml:
        name: offerformeter
  requestBodies:
    Client:
      description: Client object that needs to be added to the db.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Client'
        application/xml:
          schema:
            $ref: '#/components/schemas/Client'
    UserArray:
      description: List of readings object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Reading'

